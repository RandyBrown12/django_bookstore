CREATE TABLE IF NOT EXISTS BOOKS(
    BOOK_ID SERIAL PRIMARY KEY,
    TITLE TEXT NOT NULL,
    CATEGORY TEXT NOT NULL,
    LANGUAGE TEXT NOT NULL,
    PAGE_COUNT INT NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    BOOK_COUNT INT NOT NULL,
    PRICE DECIMAL(10, 2) NOT NULL,
    IMAGE BYTEA NOT NULL,
    CHECK(BOOK_COUNT >= 0)
);

CREATE TABLE IF NOT EXISTS AUTHORS(
    AUTHOR_ID SERIAL PRIMARY KEY,
    AUTHOR_FIRST_NAME TEXT NOT NULL,
    AUTHOR_LAST_NAME TEXT NOT NULL,
    UNIQUE(AUTHOR_FIRST_NAME, AUTHOR_LAST_NAME)
);

CREATE TABLE IF NOT EXISTS PUBLISHERS(
    PUBLISHER_ID SERIAL PRIMARY KEY,
    PUBLISHER TEXT NOT NULL,
    PUBLISHER_DATE DATE NOT NULL,
    UNIQUE(PUBLISHER_ID, PUBLISHER)
);

CREATE TABLE IF NOT EXISTS BOOK_TO_AUTHOR(
    BOOK_TO_AUTHOR_ID SERIAL PRIMARY KEY,
    BOOK_ID INT NOT NULL REFERENCES BOOKS(BOOK_ID) ON DELETE CASCADE,
    AUTHOR_ID INT NOT NULL REFERENCES AUTHORS(AUTHOR_ID) ON DELETE CASCADE,
    UNIQUE(BOOK_ID, AUTHOR_ID)
);

CREATE TABLE IF NOT EXISTS BOOK_TO_PUBLISHER(
    BOOK_TO_PUBLISHER_ID SERIAL PRIMARY KEY,
    BOOK_ID INT NOT NULL REFERENCES BOOKS(BOOK_ID) ON DELETE CASCADE,
    PUBLISHER_ID INT NOT NULL REFERENCES PUBLISHERS(PUBLISHER_ID) ON DELETE CASCADE,
    UNIQUE(BOOK_ID, PUBLISHER_ID)
);

CREATE TABLE IF NOT EXISTS ORDERS(
    ORDER_ID SERIAL PRIMARY KEY,
    CUSTOMER_ID INT REFERENCES AUTH_USER(ID),
    ORDER_DATE DATE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    TOTAL_PRICE DECIMAL(10, 2) NOT NULL 
);

CREATE TABLE IF NOT EXISTS ORDER_BOOKS(
    ORDER_BOOKS_ID SERIAL PRIMARY KEY,
    ORDER_ID INT NOT NULL REFERENCES ORDERS(ORDER_ID),
    BOOK_ID INT NOT NULL REFERENCES BOOKS(BOOK_ID),
    QUANTITY INT NOT NULL
);

CREATE TABLE IF NOT EXISTS CART_INFORMATION(
    CART_INFORMATION_ID SERIAL PRIMARY KEY,
    CUSTOMER_ID INT NOT NULL REFERENCES AUTH_USER(ID),
    BOOK_ID INT NOT NULL,
    QUANTITY INT NOT NULL
);

CREATE VIEW BOOK_INFORMATION AS
SELECT
    b.book_id AS ID,
    b.title AS TITLE, 
    b.category AS CATEGORY, 
    b.language AS LANGUAGE, 
    b.page_count AS PAGE_COUNT, 
    b.description AS DESCRIPTION, 
    b.book_count AS BOOK_COUNT,
    b.price AS PRICE,
    b.image AS IMAGE,
    STRING_AGG(DISTINCT(a.author_first_name || ' ' || a.author_last_name), ', ') AS authors,
    STRING_AGG(DISTINCT publishers.publisher, ', ') AS publishers
FROM books b
JOIN book_to_author ba ON b.book_id = ba.book_id
JOIN authors a ON ba.author_id = a.author_id
JOIN book_to_publisher ON b.book_id = book_to_publisher.book_id
JOIN publishers ON book_to_publisher.publisher_id = publishers.publisher_id
GROUP BY b.book_id;

CREATE OR REPLACE FUNCTION update_book_stock_information() 
RETURNS TRIGGER AS $$
DECLARE
    incoming_count INTEGER;
    stock_count INTEGER;
BEGIN
    SELECT BOOK_COUNT INTO stock_count FROM BOOKS WHERE BOOK_ID = NEW.BOOK_ID;
    IF stock_count - incoming_count < 0 THEN
        RAISE EXCEPTION 'Value is negative: %', stock_count - incoming_count;
    ELSE
        UPDATE BOOKS SET BOOK_COUNT = stock_count - incoming_count WHERE BOOK_ID = NEW.BOOK_ID;
        RETURN NEW;
    END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER UPDATE_BOOK_STOCK_INFORMATION_TRIGGER 
AFTER INSERT ON ORDER_BOOKS
FOR EACH ROW
EXECUTE PROCEDURE update_book_stock_information();

CREATE OR REPLACE FUNCTION check_cart_information()
RETURNS TRIGGER AS $$
DECLARE
    stock_count INTEGER;
    select_book_id_row RECORD;
BEGIN
    SELECT BOOK_COUNT INTO stock_count FROM BOOKS WHERE BOOK_ID = NEW.BOOK_ID;

    FOR select_book_id_row IN 
        SELECT CART_INFORMATION_ID, QUANTITY FROM CART_INFORMATION WHERE BOOK_ID = NEW.BOOK_ID
    LOOP
        IF stock_count - select_book_id_row.QUANTITY = 0 OR stock_count = 0 THEN
            DELETE FROM CART_INFORMATION WHERE CART_INFORMATION_ID = select_book_id_row.CART_INFORMATION_ID;        
        ELSIF stock_count - select_book_id_row.QUANTITY < 0 THEN
            UPDATE CART_INFORMATION SET QUANTITY = stock_count WHERE CART_INFORMATION_ID = select_book_id_row.CART_INFORMATION_ID;
        END IF;
    END LOOP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER CHECK_CART_INFORMATION_TRIGGER
AFTER UPDATE ON BOOKS
FOR EACH ROW 
EXECUTE PROCEDURE check_cart_information()